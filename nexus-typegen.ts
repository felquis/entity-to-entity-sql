/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as PrismaClient from ".prisma/client"
import type { Context } from "./src/context"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Entity: PrismaClient.Entity;
  EntityConnection: { // root type
    edges?: Array<NexusGenRootTypes['EntityEdge'] | null> | null; // [EntityEdge]
    nodes?: Array<NexusGenRootTypes['Entity'] | null> | null; // [Entity]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  EntityEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Entity'] | null; // Entity
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Entity: { // field return type
    id: string | null; // String
    type: string | null; // String
    value: string | null; // String
  }
  EntityConnection: { // field return type
    edges: Array<NexusGenRootTypes['EntityEdge'] | null> | null; // [EntityEdge]
    nodes: Array<NexusGenRootTypes['Entity'] | null> | null; // [Entity]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  EntityEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Entity'] | null; // Entity
  }
  Mutation: { // field return type
    entityCreate: NexusGenRootTypes['Entity'] | null; // Entity
    entityDelete: NexusGenRootTypes['Entity'] | null; // Entity
    entityUpdate: NexusGenRootTypes['Entity'] | null; // Entity
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    entityList: NexusGenRootTypes['EntityConnection'] | null; // EntityConnection
  }
}

export interface NexusGenFieldTypeNames {
  Entity: { // field return type name
    id: 'String'
    type: 'String'
    value: 'String'
  }
  EntityConnection: { // field return type name
    edges: 'EntityEdge'
    nodes: 'Entity'
    pageInfo: 'PageInfo'
  }
  EntityEdge: { // field return type name
    cursor: 'String'
    node: 'Entity'
  }
  Mutation: { // field return type name
    entityCreate: 'Entity'
    entityDelete: 'Entity'
    entityUpdate: 'Entity'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    entityList: 'EntityConnection'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    entityCreate: { // args
      entityId?: string | null; // String
      type: string; // String!
      value?: string | null; // String
    }
    entityDelete: { // args
      id: string; // String!
    }
    entityUpdate: { // args
      connectedEntityId?: string | null; // String
      disconnectedEntityId?: string | null; // String
      id: string; // String!
      type: string; // String!
      value?: string | null; // String
    }
  }
  Query: {
    entityList: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
      type?: string | null; // String
      value?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}